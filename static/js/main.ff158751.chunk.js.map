{"version":3,"sources":["api/events.js","api/session.js","components/Leaderboard.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","Prizes","generatePrizeTable","prizeData","prizeTable","prizeDistribution","eventData","data","prize","prizeTotal","prize_total","toString","replace","totalDrivers","total","hiredDrivers","hired","ownerDrivers","owner","splitLeaderboard","ownerPercentage","hiredPercentage","halfSplit","dynamicPrizePoolRatio","rankRange","i","peoplePerPrize","length","j","parseInt","rank","rankString","currentPrize","hiredPrize","toFixed","ownerPrize","Table","TableHead","TableRow","TableCell","TableBody","map","prizeRow","Card","sx","minWidth","CardContent","align","setState","getPrizeData","a","sessionID","id","toUpperCase","localStorage","getItem","JSON","parse","setPrizeData","session","get","then","response","setItem","stringify","catch","e","console","error","state","LinearProgress","undefined","value","this","Component","columns","title","field","hidden","render","rowData","Date","endTimestamp","getTime","trigger","Link","href","position","Dialog","open","fullWidth","startTimestamp","type","needsUpdate","prevAccepted","currentTime","formatEventData","singleDataPoint","sort","b","Leaderboard","BasicTable","events","setEventData","setEventDataLoaded","eventDataLoaded","icons","isLoading","options","pageSize","pageSizeOptions","label","theme","createTheme","palette","App","ThemeProvider","CssBaseline","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff158751.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://thingproxy.freeboard.io/fetch/https://events-api.revvracing.com/\"\r\n});\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://thingproxy.freeboard.io/fetch/https://game-session-api.revvracing.com/v1.0/game/count/\"\r\n});\r\n","import React, { Component } from 'react'\r\nimport MaterialTable from \"material-table\";\r\nimport { forwardRef } from 'react';\r\nimport events from '../api/events';\r\nimport session from '../api/session';\r\nimport Popup from 'reactjs-popup';\r\nimport { Card, CardContent, Dialog, Link, LinearProgress, Table, TableBody, TableCell, TableHead, TableRow, } from '@material-ui/core';\r\n\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nclass Prizes extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            prizeTable: <LinearProgress />,\r\n            prizeData: undefined,\r\n        };\r\n    }\r\n\r\n    setPrizeData(value) {\r\n        this.setState({\r\n            prizeData: value\r\n        });\r\n\r\n        this.generatePrizeTable(value)\r\n    }\r\n\r\n    generatePrizeTable = (prizeData) => {\r\n        let prizeTable = <div></div>\r\n        let prizeDistribution = this.props.eventData.data.prize\r\n        let prizeTotal = this.props.eventData.data.prize_total.toString().replace(/\\D/g, '');\r\n        let totalDrivers = prizeData.total\r\n        let hiredDrivers = prizeData.hired\r\n        let ownerDrivers = prizeData.owner\r\n        let splitLeaderboard = false\r\n        if(this.props.eventData.data.splitLeaderboard){splitLeaderboard = true}\r\n        if (totalDrivers > 0) {\r\n            let ownerPercentage = (ownerDrivers / totalDrivers)\r\n            let hiredPercentage = (hiredDrivers / totalDrivers)\r\n            let halfSplit = false\r\n            if(!this.props.eventData.data.dynamicPrizePoolRatio){\r\n                ownerPercentage = 0.5\r\n                hiredPercentage = 0.5\r\n                halfSplit = true\r\n            }\r\n\r\n            let rankRange = false\r\n            for (const i in prizeDistribution) {\r\n                let peoplePerPrize = 1\r\n                if (prizeDistribution[i].prize < 1 || halfSplit) {\r\n                    if (i < prizeDistribution.length - 1) {\r\n                        let j = parseInt(i) + 1\r\n                        if (prizeDistribution[j].rank - prizeDistribution[i].rank > 1) {\r\n                            rankRange = true\r\n                            prizeDistribution[i].rankString = prizeDistribution[i].rank.toString() + ' - ' + (prizeDistribution[j].rank - 1).toString()\r\n                            peoplePerPrize = parseInt(prizeDistribution[j].rank) - parseInt(prizeDistribution[i].rank)\r\n                        }\r\n                    } else {\r\n                        if (rankRange) {\r\n                            prizeDistribution[i].rankString = prizeDistribution[i].rank.toString() + '+*'\r\n                            peoplePerPrize = 3000\r\n                        }\r\n                    }\r\n\r\n                    if(!prizeDistribution[i].rankString){\r\n                        prizeDistribution[i].rankString = prizeDistribution[i].rank.toString()\r\n                    }\r\n\r\n                    let currentPrize = prizeDistribution[i].prize * (halfSplit ? 1: prizeTotal)\r\n                    prizeDistribution[i].hiredPrize = (hiredPercentage * currentPrize / peoplePerPrize).toFixed(2)\r\n                    prizeDistribution[i].ownerPrize = (ownerPercentage * currentPrize / peoplePerPrize).toFixed(2)\r\n\r\n                } \r\n            }\r\n\r\n            prizeTable = <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Rank</TableCell>\r\n                        <TableCell>Driver Prize {splitLeaderboard && '(' + (ownerPercentage * 100).toFixed(2) + '%)'}</TableCell>\r\n                        {splitLeaderboard && <TableCell>Hired Prize ({(hiredPercentage * 100).toFixed(2)}%)</TableCell>}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        prizeDistribution.map((prizeRow) => (\r\n\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    {prizeRow.rankString ? prizeRow.rankString: prizeRow.rank}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {splitLeaderboard ? prizeRow.ownerPrize : prizeRow.prize}\r\n                                </TableCell>\r\n                                {splitLeaderboard && <TableCell>\r\n                                    {prizeRow.hiredPrize}\r\n                                </TableCell>}\r\n                            </TableRow>\r\n                        ))\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        } else {\r\n            prizeTable = <Card sx={{ minWidth: 275 }}>\r\n                <CardContent align=\"center\">\r\n                    <h1>Prize Data Not Available</h1>\r\n                </CardContent>\r\n            </Card>\r\n        }\r\n\r\n\r\n        this.setState({\r\n            prizeTable: prizeTable\r\n        })\r\n    }\r\n\r\n    getPrizeData = async () => {\r\n        let prizeData;\r\n        let sessionID = this.props.eventData.id.toUpperCase();\r\n        if (localStorage.getItem(sessionID)) {\r\n            prizeData = JSON.parse(localStorage.getItem(sessionID))\r\n            this.setPrizeData(prizeData);\r\n        } else {\r\n            session.get(`${sessionID}`).then((response) => {\r\n                prizeData = response.data\r\n                if (prizeData.total > 0) {\r\n                    localStorage.setItem(sessionID, JSON.stringify(prizeData));\r\n                }\r\n                this.setPrizeData(prizeData);\r\n            }).catch((e) => {\r\n                console.error(e)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPrizeData()\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.state.prizeTable}</div>\r\n    }\r\n}\r\n\r\nconst columns = [\r\n    { title: \"Series\", field: \"data.series\", hidden: true },\r\n    { title: \"Name\", field: \"data.name\" },\r\n    {\r\n        title: \"View Pizes\", field: \"\", render: rowData => {\r\n            if (new Date(rowData.endTimestamp).getTime() < new Date().getTime()) {\r\n                return <Popup trigger={<Link href=\"#\">View Prizes</Link>} position=\"bottom center\" >\r\n                    <Dialog open fullWidth>\r\n                        <Prizes eventData={rowData} />\r\n                    </Dialog>\r\n                </Popup>\r\n            } else {\r\n                return <div>{new Date(rowData.startTimestamp).getTime() < new Date().getTime() ? 'In Progress' : 'Upcoming'}...</div>\r\n            }\r\n        }\r\n    },\r\n    { title: \"Start\", field: \"startTimestamp\", type: \"date\" },\r\n    { title: \"End\", field: \"endTimestamp\", type: \"date\" },\r\n    { title: \"Track\", field: \"data.track\" },\r\n    { title: \"Laps\", field: \"data.lapCount\" },\r\n    { title: \"Weather\", field: \"data.weather\" },\r\n    { title: \"Total Prize\", field: \"data.prize_total\" },\r\n    { title: \"id\", field: \"id\", hidden: true },\r\n    { title: \"percentagePrizePool\", field: \"data.percentagePrizePool\", hidden: true },\r\n    { title: \"dynamicPrizePoolRatio\", field: \"data.dynamicPrizePoolRatio\", hidden: true },\r\n    { title: \"splitLeaderboard\", field: \"data.splitLeaderboard\", hidden: true },\r\n];\r\n\r\nfunction needsUpdate() {\r\n    const expirationDuration = 1000 * 60 * 60 * 24; // 12 hours\r\n\r\n    const prevAccepted = localStorage.getItem(\"accepted\");\r\n    const currentTime = new Date().getTime();\r\n\r\n    const notAccepted = prevAccepted === undefined;\r\n    const prevAcceptedExpired = prevAccepted !== undefined && currentTime - prevAccepted > expirationDuration;\r\n    if (notAccepted || prevAcceptedExpired) {\r\n        localStorage.setItem(\"accepted\", currentTime);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction formatEventData(eventData) {\r\n    eventData.map(singleDataPoint => {\r\n        singleDataPoint.startTimestamp = new Date(singleDataPoint.startTimestamp)\r\n        singleDataPoint.endTimestamp = new Date(singleDataPoint.endTimestamp)\r\n        return singleDataPoint\r\n    })\r\n\r\n    eventData.sort(function (a, b) {\r\n        return new Date(b.startTimestamp) - new Date(a.startTimestamp);\r\n    });\r\n\r\n    return eventData;\r\n}\r\n\r\n\r\nexport default class Leaderboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            eventData: undefined,\r\n            eventDataLoaded: false,\r\n        };\r\n    }\r\n\r\n    setEventData(eventData) {\r\n        this.setState({ eventData: eventData })\r\n    }\r\n\r\n    setEventDataLoaded(value) {\r\n        this.setState({ eventDataLoaded: value })\r\n    }\r\n\r\n    BasicTable = async () => {\r\n        let eventData;\r\n        if (needsUpdate() || !localStorage.getItem(\"events\")) {\r\n            events.get(``).then((response) => {\r\n                eventData = response.data\r\n                eventData = formatEventData(eventData);\r\n                this.setEventData(eventData);\r\n                this.setEventDataLoaded(true);\r\n                localStorage.setItem(\"events\", JSON.stringify(eventData));\r\n            }).catch((e) => {\r\n                console.error(e)\r\n            })\r\n        } else {\r\n            eventData = JSON.parse(localStorage.getItem(\"events\"));\r\n            this.setEventData(eventData);\r\n            this.setEventDataLoaded(true);\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.BasicTable();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <MaterialTable\r\n                    title=\"REVV Leaderboards\"\r\n                    columns={columns}\r\n                    data={this.state.eventData}\r\n                    icons={tableIcons}\r\n                    isLoading={!this.state.eventDataLoaded}\r\n                    options={{\r\n                        pageSize: 10,\r\n                        pageSizeOptions: [5, 10, 20, { value: this.state.eventData ? parseInt(this.state.eventData.length) : 0, label: 'All' }],\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Leaderboard from './components/Leaderboard';\nimport { ThemeProvider, createTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Container } from '@material-ui/core';\n\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  }\n});\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Container>\n        <Leaderboard />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}